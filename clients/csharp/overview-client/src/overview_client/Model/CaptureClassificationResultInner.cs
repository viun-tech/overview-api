/*
 * Overview Smart AI Cameras API
 *
 * This the API specifications for the OV20i Smart AI Camera produced by Overview Inc. It works with firmware versions above 2024.23.1.  Some useful links: - [Overview Documentation](https://overview.ai/support)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: lucas.vandroux@viun.tech
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = overview_client.Client.OpenAPIDateConverter;

namespace overview_client.Model
{
    /// <summary>
    /// CaptureClassificationResultInner
    /// </summary>
    [DataContract(Name = "Capture_classification_result_inner")]
    public partial class CaptureClassificationResultInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CaptureClassificationResultInner" /> class.
        /// </summary>
        /// <param name="createdAt">Timestamp when the classification was performed.</param>
        /// <param name="confidence">Confidence score of the classification result.</param>
        /// <param name="blockClassificationClasses">blockClassificationClasses.</param>
        /// <param name="roiResult">roiResult.</param>
        public CaptureClassificationResultInner(DateTime createdAt = default(DateTime), float confidence = default(float), CaptureClassificationResultInnerBlockClassificationClasses blockClassificationClasses = default(CaptureClassificationResultInnerBlockClassificationClasses), CaptureClassificationResultInnerRoiResult roiResult = default(CaptureClassificationResultInnerRoiResult))
        {
            this.CreatedAt = createdAt;
            this.Confidence = confidence;
            this.BlockClassificationClasses = blockClassificationClasses;
            this.RoiResult = roiResult;
        }

        /// <summary>
        /// Timestamp when the classification was performed
        /// </summary>
        /// <value>Timestamp when the classification was performed</value>
        /*
        <example>2025-01-14T20:30:13.38355+00:00</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Confidence score of the classification result
        /// </summary>
        /// <value>Confidence score of the classification result</value>
        /*
        <example>0.8258894918836092</example>
        */
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public float Confidence { get; set; }

        /// <summary>
        /// Gets or Sets BlockClassificationClasses
        /// </summary>
        [DataMember(Name = "block_classification_classes", EmitDefaultValue = false)]
        public CaptureClassificationResultInnerBlockClassificationClasses BlockClassificationClasses { get; set; }

        /// <summary>
        /// Gets or Sets RoiResult
        /// </summary>
        [DataMember(Name = "roi_result", EmitDefaultValue = false)]
        public CaptureClassificationResultInnerRoiResult RoiResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CaptureClassificationResultInner {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  BlockClassificationClasses: ").Append(BlockClassificationClasses).Append("\n");
            sb.Append("  RoiResult: ").Append(RoiResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
