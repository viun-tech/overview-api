/*
 * Overview Smart AI Cameras API
 *
 * This the API specifications for the OV20i Smart AI Camera produced by Overview Inc. It works with firmware versions above 2024.23.1.  Some useful links: - [Overview Documentation](https://overview.ai/support)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: lucas.vandroux@viun.tech
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = overview_client.Client.OpenAPIDateConverter;

namespace overview_client.Model
{
    /// <summary>
    /// Capture
    /// </summary>
    [DataContract(Name = "Capture")]
    public partial class Capture : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Capture" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the capture.</param>
        /// <param name="capturedAt">Timestamp when the capture was taken.</param>
        /// <param name="sourceRecipeId">ID of the recipe used for this capture.</param>
        /// <param name="path">File path of the captured image.</param>
        /// <param name="height">Height of the captured image in pixels.</param>
        /// <param name="width">Width of the captured image in pixels.</param>
        /// <param name="size">Size of the captured image file in bytes.</param>
        /// <param name="classificationResult">List of classification results for each ROI.</param>
        public Capture(int id = default(int), DateTime capturedAt = default(DateTime), int sourceRecipeId = default(int), string path = default(string), int height = default(int), int width = default(int), int size = default(int), List<CaptureClassificationResultInner> classificationResult = default(List<CaptureClassificationResultInner>))
        {
            this.Id = id;
            this.CapturedAt = capturedAt;
            this.SourceRecipeId = sourceRecipeId;
            this.Path = path;
            this.Height = height;
            this.Width = width;
            this.Size = size;
            this.ClassificationResult = classificationResult;
        }

        /// <summary>
        /// Unique identifier of the capture
        /// </summary>
        /// <value>Unique identifier of the capture</value>
        /*
        <example>9207</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Timestamp when the capture was taken
        /// </summary>
        /// <value>Timestamp when the capture was taken</value>
        /*
        <example>2024-10-28T10:44:43.048129+00:00</example>
        */
        [DataMember(Name = "captured_at", EmitDefaultValue = false)]
        public DateTime CapturedAt { get; set; }

        /// <summary>
        /// ID of the recipe used for this capture
        /// </summary>
        /// <value>ID of the recipe used for this capture</value>
        /*
        <example>42</example>
        */
        [DataMember(Name = "source_recipe_id", EmitDefaultValue = false)]
        public int SourceRecipeId { get; set; }

        /// <summary>
        /// File path of the captured image
        /// </summary>
        /// <value>File path of the captured image</value>
        /*
        <example>library_captures/1730112283020.jpg</example>
        */
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Height of the captured image in pixels
        /// </summary>
        /// <value>Height of the captured image in pixels</value>
        /*
        <example>1080</example>
        */
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Width of the captured image in pixels
        /// </summary>
        /// <value>Width of the captured image in pixels</value>
        /*
        <example>1408</example>
        */
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Size of the captured image file in bytes
        /// </summary>
        /// <value>Size of the captured image file in bytes</value>
        /*
        <example>733320</example>
        */
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// List of classification results for each ROI
        /// </summary>
        /// <value>List of classification results for each ROI</value>
        [DataMember(Name = "classification_result", EmitDefaultValue = false)]
        public List<CaptureClassificationResultInner> ClassificationResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Capture {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CapturedAt: ").Append(CapturedAt).Append("\n");
            sb.Append("  SourceRecipeId: ").Append(SourceRecipeId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  ClassificationResult: ").Append(ClassificationResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
