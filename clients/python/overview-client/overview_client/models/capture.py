# coding: utf-8

"""
    Overview Smart AI Cameras API

    This the API specifications for the OV20i Smart AI Camera produced by Overview Inc. It works with firmware versions above 2024.23.1.  Some useful links: - [Overview Documentation](https://overview.ai/support)

    The version of the OpenAPI document: 0.0.1
    Contact: lucas.vandroux@viun.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from overview_client.models.capture_classification_result_inner import CaptureClassificationResultInner
from typing import Optional, Set
from typing_extensions import Self

class Capture(BaseModel):
    """
    Capture
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier of the capture")
    captured_at: Optional[datetime] = Field(default=None, description="Timestamp when the capture was taken")
    source_recipe_id: Optional[StrictInt] = Field(default=None, description="ID of the recipe used for this capture")
    path: Optional[StrictStr] = Field(default=None, description="File path of the captured image")
    height: Optional[StrictInt] = Field(default=None, description="Height of the captured image in pixels")
    width: Optional[StrictInt] = Field(default=None, description="Width of the captured image in pixels")
    size: Optional[StrictInt] = Field(default=None, description="Size of the captured image file in bytes")
    classification_result: Optional[List[CaptureClassificationResultInner]] = Field(default=None, description="List of classification results for each ROI")
    __properties: ClassVar[List[str]] = ["id", "captured_at", "source_recipe_id", "path", "height", "width", "size", "classification_result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Capture from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in classification_result (list)
        _items = []
        if self.classification_result:
            for _item_classification_result in self.classification_result:
                if _item_classification_result:
                    _items.append(_item_classification_result.to_dict())
            _dict['classification_result'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Capture from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "captured_at": obj.get("captured_at"),
            "source_recipe_id": obj.get("source_recipe_id"),
            "path": obj.get("path"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "size": obj.get("size"),
            "classification_result": [CaptureClassificationResultInner.from_dict(_item) for _item in obj["classification_result"]] if obj.get("classification_result") is not None else None
        })
        return _obj


