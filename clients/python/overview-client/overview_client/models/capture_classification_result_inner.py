# coding: utf-8

"""
    Overview Smart AI Cameras API

    This the API specifications for the OV20i Smart AI Camera produced by Overview Inc. It works with firmware versions above 2024.23.1.  Some useful links: - [Overview Documentation](https://overview.ai/support)

    The version of the OpenAPI document: 0.0.1
    Contact: lucas.vandroux@viun.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from overview_client.models.capture_classification_result_inner_block_classification_classes import CaptureClassificationResultInnerBlockClassificationClasses
from overview_client.models.capture_classification_result_inner_roi_result import CaptureClassificationResultInnerRoiResult
from typing import Optional, Set
from typing_extensions import Self

class CaptureClassificationResultInner(BaseModel):
    """
    CaptureClassificationResultInner
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the classification was performed")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence score of the classification result")
    block_classification_classes: Optional[CaptureClassificationResultInnerBlockClassificationClasses] = None
    roi_result: Optional[CaptureClassificationResultInnerRoiResult] = None
    __properties: ClassVar[List[str]] = ["created_at", "confidence", "block_classification_classes", "roi_result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CaptureClassificationResultInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of block_classification_classes
        if self.block_classification_classes:
            _dict['block_classification_classes'] = self.block_classification_classes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roi_result
        if self.roi_result:
            _dict['roi_result'] = self.roi_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CaptureClassificationResultInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "confidence": obj.get("confidence"),
            "block_classification_classes": CaptureClassificationResultInnerBlockClassificationClasses.from_dict(obj["block_classification_classes"]) if obj.get("block_classification_classes") is not None else None,
            "roi_result": CaptureClassificationResultInnerRoiResult.from_dict(obj["roi_result"]) if obj.get("roi_result") is not None else None
        })
        return _obj


